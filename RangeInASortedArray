//https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/submissions/

class Solution {
    
    public int searchUpperBound(int[] nums, int target)
    {
        int low = 0, high = nums.length-1;
        
        while(low <= high)
        {
            int mid = low + (high-low)/2;
            
            if(target > nums[mid])
                low = mid+1;
            else if(target < nums[mid])
                high = mid-1;
            else
            {
                if(mid == nums.length-1 || nums[mid] != nums[mid+1])
                    return mid;
                else
                    low = mid+1;
            }
        }
        
        return -1;
    }
    
    public int searchLowerBound(int[] nums, int target)
    {
        int low = 0, high = nums.length-1;
        
        while(low <= high)
        {
            int mid = low + (high-low)/2;
            
            if(nums[mid] > target)
                high = mid-1;
            else if(nums[mid] < target)
                low = mid+1;
            else
            {
                if(mid == 0 || nums[mid] != nums[mid-1])
                    return mid;
                else
                    high = mid-1;  
            }
        }
        
        return -1;
    }
    
    public int[] searchRange(int[] nums, int target) 
    {
        if(nums.length == 1 && nums[0] == target)
            return new int[] {0,0};
        int n1 = searchLowerBound(nums, target);
        System.out.println(n1);
        
        if(n1 == -1)
            return new int[] {-1,-1};
        int n2 = searchUpperBound(nums, target);
        
        return new int[] {n1,n2};
    }
}
