https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/submissions/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int index;
    public int findInInorder(int[] inorder, int target, int start)
    {
        for(int i=start; i < inorder.length; i++ )
        {
            if(inorder[i] == target)
                return i;
        }
        return -1;
    }
    public TreeNode recur(int[] preorder, int[] inorder,int inorderStart, int inorderEnd)
    {
        if(inorderStart > inorderEnd)
            return null;
        
        TreeNode root = new TreeNode(preorder[index++]);
        
        if(inorderStart == inorderEnd)return root;
        
        int val = findInInorder(inorder, preorder[index-1], inorderStart);
        
        root.left = recur(preorder, inorder,inorderStart, val-1);
        root.right = recur(preorder, inorder, val+1, inorderEnd);
        
        return root;
    }
    public TreeNode buildTree(int[] preorder, int[] inorder) 
    {
        index = 0;
        if(inorder.length == 0)
            return null;
        return recur(preorder, inorder, 0, inorder.length-1);
    }
}
