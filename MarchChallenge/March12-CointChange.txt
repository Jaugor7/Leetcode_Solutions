https://leetcode.com/explore/challenge/card/march-leetcoding-challenge-2021/589/week-2-march-8th-march-14th/3668/

class Solution {
    public int recur(int[]coins , int amount, int index, Integer[][] dp)
    {
        if(amount == 0)return 0;
        if(index >= coins.length)return Integer.MAX_VALUE;
        
        if(dp[index][amount] == null)
        {
            int n1 = Integer.MAX_VALUE;
            if(amount - coins[index] >= 0)
            {
                int res = recur(coins, amount-coins[index], index, dp);
                if(res != Integer.MAX_VALUE)
                    n1 = res+1;
            }
            int n2 = recur(coins, amount, index+1, dp);

            dp[index][amount] = Math.min(n1,n2);
        }
        return dp[index][amount];
    }
    public int coinChange(int[] coins, int amount) 
    {
        if(amount == 0)return 0;
        if(coins.length == 0)return -1;
        
        Integer[][] dp= new Integer[coins.length+1][amount+1];
        
        int res = recur(coins, amount, 0, dp);
        return (res == Integer.MAX_VALUE) ? -1 : res; 
    }
}