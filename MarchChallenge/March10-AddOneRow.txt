https://leetcode.com/explore/challenge/card/march-leetcoding-challenge-2021/589/week-2-march-8th-march-14th/3666/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode addOneRow(TreeNode root, int v, int d) {
        if(d == 1) 
        {
            TreeNode node = new TreeNode(v);
            node.left = root;
            return node;
        }
        
        int currentDepth = 1;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        
        while(currentDepth < d && !q.isEmpty())
        {
            int size = q.size();
            for(int i=0; i < size; i++)
            {
                TreeNode curr = q.poll();
                
                if(currentDepth == d-1)
                {
                    TreeNode newNode = new TreeNode(v);
                    newNode.left = curr.left;
                    curr.left = newNode;
                    
                    newNode = new TreeNode(v);
                    newNode.right = curr.right;
                    curr.right = newNode;
                }
                else
                {
                    if(curr.left != null)q.add(curr.left);
                    if(curr.right != null)q.add(curr.right);
                }
            }
            currentDepth++;
        }
        
        
        return root;        
    }
}